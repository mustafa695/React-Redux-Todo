{"version":3,"sources":["Components/Todo.js","actions/index.js","App.js","reportWebVitals.js","reducers/todoreducers.js","reducers/index.js","Redux/store.js","index.js"],"names":["Todo","dispatch","useDispatch","list","useSelector","state","todoReducers","useState","value","setValue","editVal","setEditVal","updatedInput","setUpdateInput","console","log","className","type","placeholder","onChange","e","target","onClick","id","Math","floor","random","addTodo","map","item","name","updateList","editTodo","showEdit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","newList","filter","newValue","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.57eae717.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addTodo, removeTodo, editTodo } from '../actions/index';\r\n\r\nfunction Todo() {\r\n  const dispatch = useDispatch();\r\n  const list = useSelector((state) => state.todoReducers.list);\r\n  const [value, setValue] = useState('');\r\n  const [editVal, setEditVal] = useState('')\r\n  const [updatedInput, setUpdateInput] = useState(false);\r\n  \r\n  // const [todoList, setTodoList] = useState(list)\r\n\r\n  console.log(list,'List Main')\r\n\r\n  const addAction = () => {\r\n  \r\n    dispatch(addTodo(value))\r\n    setValue(\"\");\r\n    \r\n    \r\n  }\r\n\r\n  //show edit Input box\r\n  const showEdit = (item) => {\r\n    \r\n    setUpdateInput(item?.id)\r\n    setEditVal(item?.list)\r\n\r\n  };\r\n  const update = (id) =>{\r\n    \r\n    dispatch(editTodo(id, editVal))\r\n    setUpdateInput(false)\r\n    console.log('Edit ID', id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"todo-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Todos...\"\r\n          className=\"todo\"\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"todo-btn\"\r\n          onClick={addAction}\r\n        >\r\n          Add Todo\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"set\">\r\n        {list.map((item) => {\r\n          return (\r\n            <div className=\"todo_show\" key={item.id}>\r\n              {updatedInput === item.id ? (\r\n                <>\r\n                  <input type=\"text\" name=\"text\" value={editVal} onChange={(e) => setEditVal(e.target.value)}/>\r\n                  <button className=\"btn update\" onClick={() => update(item.id)}>Update</button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {' '}\r\n                  <h4>{item.list}</h4>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn edit\"\r\n                    onClick={() => showEdit(item)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                </>\r\n              )}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn remove\"\r\n                onClick={() => dispatch(removeTodo(item.id))}\r\n              >\r\n                Remove\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","export const addTodo = (list) => {\r\n \r\n  return {\r\n    type: 'ADD_TODO',\r\n    id: Math.floor(Math.random() * 100),\r\n    list: list,\r\n  };\r\n};\r\n\r\nexport const removeTodo = (id) => {\r\n\r\n  return {\r\n    type: 'REMOVE_TODO',\r\n    id\r\n  }\r\n}\r\n\r\nexport const editTodo = (id, updateList) => {\r\n  \r\n  return {\r\n    type: 'EDIT_TODO',\r\n    id,\r\n    updateList:updateList,\r\n  }\r\n}","import './App.css';\nimport Todo from './Components/Todo'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"main_head\">REACT --REDUX-- TODO APP</h1>\n       <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n  list: [],\r\n  \r\n};\r\n\r\nconst todoReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return {\r\n        state,\r\n        list: [...state.list,{id: action.id,list: action.list}],\r\n      }\r\n\r\n      case 'REMOVE_TODO':\r\n        const newList = state.list.filter((item) => item.id !== action.id)\r\n        return{\r\n          ...state,\r\n          list: newList\r\n        }\r\n      \r\n      case 'EDIT_TODO':\r\n       \r\n        const newValue = state.list.filter((item) => item.id === action.id? item.list = action.updateList: item)\r\n        \r\n        return{\r\n          ...state,\r\n          list: newValue\r\n          \r\n        }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducers;\r\n","import todoReducers from './todoreducers'\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducers\r\n})\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\n\r\nimport storage from 'redux-persist/lib/storage' \r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n  }\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst store = createStore(persistedReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n// export default store;\r\n\r\nconst persistor = persistStore(store)\r\n \r\nexport {store, persistor}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor } from './Redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}